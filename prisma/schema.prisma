// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./client/mysql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 每次修改 schema.prisma 后，都需要运行 prisma migrate dev 命令，才能同步到数据库
// 每次创建新的 model 时，都需要运行 prisma db push 命令，才能同步到数据库
// prisma generate 命令，会根据 schema.prisma 生成 prisma client 代码 （提供的一个用于操作数据库的客户端库）

// npx prisma migrate dev --name initial-migration

// 将数据库重置为与迁移历史完全同步的初始状态
// npx prisma migrate reset
// 标记已应用的迁移为已解决，避免在后续迁移中重复应用
// npx prisma migrate resolve --applied 20251012000005_role

// !!!⚠️ 联合查询字段统一用首字母大写（这里用了首次小写，是不符合 prisma 规范的）
model User {
  id       Int     @default(autoincrement()) @id
  username String  @unique
  password String

  // 添加与 UserRole 的反向关系：一个用户可以关联多个 UserRole（即多个角色）
  Roles    UserRole[]

  @@map("users")
}

model Role {
  id       Int       @default(autoincrement()) @id
  name     String    @unique
  description   String?
  // 角色关联的用户
  Users    UserRole[]
  // 角色关联的权限
  RolePermissions RolePermissions[]
  RolePolicies RolePolicy[]

  @@map("roles")
}

model UserRole {
  userId Int
  roleId Int

  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])
  
  // 联合主键
  @@id([userId, roleId])

  // 表格名称
  @@map("user_roles")
}

model Permission {
  id       Int       @default(autoincrement()) @id
  // ControllerName+RouteName 如：user:create
  name     String    @unique
  action   String    // 权限操作，如：read、write、delete 等
  description   String?

  RolePermissions RolePermissions[]
  PermissionPolicies PermissionPolicy[]

  @@map("permissions")
}

model RolePermissions {
  roleId Int
  permissionId Int
  // 角色关联的权限
  role        Role       @relation(fields: [roleId], references: [id])
  permission  Permission @relation(fields: [permissionId], references: [id])

  // 联合主键
  @@id([roleId, permissionId])

  // 表格名称
  @@map("role_permissions")
}

model Policy {
  id       Int       @default(autoincrement()) @id
  type     Int       // 0: json，1: mongo 2: 函数
  effect   String       // can cannot
  action   String    // 权限操作，如：read、write、delete 等
  subject  String    // 权限作用对象 Class，如：Article、User 等
  fields   Json?     // 数据库字段
  conditions Json? // 权限条件，如：({ authorId }) => authorId === user.id
  args     Json?   // 权限参数，如：['user']

  // base64 编码后的策略内容 (type + effect + action + subject + fields + conditions + args)
  encode   String   @unique  @db.VarChar(391)  // @db.Text 或 @db.LongText 这样可以存储更长的字符串。

  RolePolicies RolePolicy[]
  PermissionPolicies PermissionPolicy[]

  @@map("policy")
}

// Role -> Policy 角色所拥有的策略权限
model RolePolicy {
  roleId Int
  policyId Int

  role      Role    @relation(fields: [roleId], references: [id])
  policy    Policy  @relation(fields: [policyId], references: [id])

  // 联合主键
  @@id([roleId, policyId])

  // 表格名称
  @@map("role_policies")
}

model PermissionPolicy {
  permissionId Int
  policyId Int

  permission  Permission @relation(fields: [permissionId], references: [id])
  policy    Policy  @relation(fields: [policyId], references: [id])

  // 联合主键
  @@id([permissionId, policyId])

  // 表格名称
  @@map("permission_policies")
}

// 1. menu 表：存储菜单的基本信息，包括菜单的路径、组件、重定向等。
// 2. meta 表：存储菜单的元数据，包括菜单的名称、图标、排序等。
model Menu {
  id   Int        @id @default(autoincrement())
  name String?    @unique
  path String
  component String?
  redirect  String?
  fullPath  String?
  alias     String?
  label     String?

  // self-relation
  parentId  Int?
  parent    Menu? @relation("menu_relation", fields: [parentId], references: [id])
  children  Menu[] @relation("menu_relation")

  Meta Meta?

  @@map("menus")
}

model Meta {
  id  Int @id @default(autoincrement())
  title String?
  layout String?
  order Int? @default(100)
  icon String?
  hideMenu  Boolean @default(false)
  disabled  Boolean @default(false)

  menuId Int @unique
  Menu Menu @relation(fields: [menuId], references: [id])

  @@map("menu_meta")
}
